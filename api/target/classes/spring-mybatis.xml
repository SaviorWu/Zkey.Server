<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="configProperties"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxTotal" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="maxWaitMillis" value="${jdbc.maxWait}"/>
        <property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}"/>
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <!--超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180）-->
        <property name="removeAbandonedTimeout" value="120" />
        <!--超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true)-->
        <property name="removeAbandonedOnBorrow" value="true" />
        <!-- #运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务。 -->
        <property name="timeBetweenEvictionRunsMillis" value="3600000" />
        <!-- #连接的超时时间，默认为半小时。 -->
        <property name="minEvictableIdleTimeMillis" value="3600000" />
    </bean>

    <!-- 创建SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath*:**/mapping/**Mapper.xml" />
        <!--<property name="plugins">-->
            <!--<array>-->
                <!--<bean class="com.github.pagehelper.PageHelper">-->
                    <!--<property name="properties">-->
                        <!--<value>-->
                            <!--dialect=mysql-->
                        <!--</value>-->
                    <!--</property>-->
                <!--</bean>-->
            <!--</array>-->
        <!--</property>-->
    </bean>

    <!-- 加载mybatis配置文件 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--当指定了annotationClass的时候，MapperScannerConfigurer将只注册使用了annotationClass注解标记的接口。-->
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/>
        <property name="basePackage" value="pro.zkey.**.daos" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 面向方面 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- *****************************************
             * 面向切面编程 配置tx/aop声明式事务 使用基于@Transactional注解式声明事务
             * 与 tx:advice同级,个人认为使用"声明式事务"较清晰
             *****************************************-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--&lt;!&ndash; 配置事务处理面（事务通知） &ndash;&gt;-->
    <!--<tx:advice id="appAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash;<tx:attributes>&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash; 配置事务属性 &ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash; name表示以什么开始的方法名，比如 add*表示add开头的方法 propagation表示事务传播属性，不写默认有 &ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash; 默认值： isolation="DEFAULT" timeout="-1" propagation="REQUIRED" read-only="false" &ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="insert*" propagation="REQUIRED" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="update*" propagation="REQUIRED" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="delete*" propagation="REQUIRED" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="batch*" propagation="REQUIRED" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="read*" propagation="REQUIRED" read-only="true" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="get*" propagation="REQUIRED" read-only="true" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="count*" propagation="REQUIRED" read-only="true" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="find*" propagation="REQUIRED" read-only="true" />&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="*"  read-only="true"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="add*" propagation="REQUIRED"/>&ndash;&gt;-->
        <!--&lt;!&ndash;</tx:attributes>&ndash;&gt;-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 配置AOP事务 &ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash; 配置事务切点 &ndash;&gt;-->
        <!--<aop:pointcut expression="execution(* pro.zkey.service..* (..))"-->
                      <!--id="appPoint" />-->
        <!--&lt;!&ndash; 结合事务切点与切面 &ndash;&gt;-->
        <!--<aop:advisor advice-ref="appAdvice" pointcut-ref="appPoint" />-->
    <!--</aop:config>-->

    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"></property>-->
    <!--</bean>-->

    <!--<bean id="namedTemplate"-->
          <!--class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">-->
        <!--<constructor-arg index="0" ref="dataSource"></constructor-arg>-->
    <!--</bean>-->



</beans>

